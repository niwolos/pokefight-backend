POKEFIGHT MECHANICS

---- frontend part start  ----

select pokemon by ID or by pressing random (randomizes 0-189 each side for id | pretty nice, quick way of randomizing games) 
    or by searching by name from a nice UI list (more fancy & effort)

UI shows:
pokemon A basic stats
	def, attack, HP			HP , attack , def
sp def, sp att, speed 		speed, sp attack, sp def

Game Model:
-selected pokemons A & B 
-button to start game
-keep track of current turn
-one game consists of 1-n turns
-save a combat log of rows of text in array


Combat turn order:
speed turn
	-both pokemon roll for speed initiative
part 1
	-pokemon 1 (faster) does attack (80% chance) or special attack (20% chance) 
	-pokemon 1 rolls 0-Attack OR 0-sp.Attack COMPARES against pokemon 2 0-Defense 0-Sp.Defense 
	-actual damage done: dmg-roll - def-roll => pokemon 2 HP (IF above 0)
		#update hp values in UI
	-combat is logged in text (console) & saved in model with Attacker-speed, Defender-speed, Attack-type, Attack-roll, Defense-roll, Damage-taken
part 2 of the same turn - if pokemon 2 not dead then:
	-pokemon 2 (slower) does attack (80% chance) or special attack (20% chance) 
	-pokemon 2 rolls 0-Attack OR 0-sp.Attack COMPARES against pokemon 1 0-Defense 0-Sp.Defense 
	-actual damage done: dmg-roll - def-roll => pokemon 1 HP (IF above 0)
		#update hp values in UI
	-combat is logged in text (console) & saved in model with Attacker-speed, Defender-speed, Attack-type, Attack-roll, Defense-roll, Damage-taken
if both pokemon hp > 0 start next turn


once game is over send data to "game/save" in format exactly like gameSchemma


leaderboard stuff:
"/leaderboard" get list of all games in gameSchema format from mongoDB database via backend route "game/leaderboard"
=> display them like the list of pokemon (href links by name to the pokemon details "pokemon/:id/")

----   frontend part end  ----
----   backend part start ----

POST "/game/save" backend-end api route will accept POST request with a finished game's data containing everything below with the same variable names
GET "game/leaderboard" will send list of all games in gameSchema format from databse to frontend similar to list of pokemons from json file

Schema:

import mongoose from 'mongoose';
const { Schema } = mongoose

const gameSchema = new Schema({
	//_id: ObjectId,		 //unique id (not needed to be specified, already automatically generated by mongoDB)
	game_timestamp: Date,
	pokemon_1_name: String,
	pokemon_1_id: Number
	pokemon_2_name: String,
	pokemon_2_id: Number,
    game_winner_name: String
	game_winner_id: Number,
    game_rounds: Number,
    game_log: String        //JSON array with Strings 
    => "[
        "Pokefight has begun!",
        "Pokemon A goes first (22>15)",
        "Pokemon A rolled 30 sp-attack, B rolled 25 sp-def, B takes 5 damage (45HP remaining)",
         "....",
        "Pokemon B rolled 30 attack, A rolled 5 defense, A takes 25 damage (0 hp remaining)",
        "Pokemon A has reached 0 health and passed out!", 
        "Pokemon B has won!"
        ]"
});


----   backend part end ----